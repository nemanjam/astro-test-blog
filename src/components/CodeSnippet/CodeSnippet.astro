---
import rangeParser from "parse-numeric-range";
import { ShikiBlock } from "./ShikiBlock";
import {
  type InlineMarkingDefinition,
  type LineMarkingDefinition,
  type MarkerType,
  MarkerTypeOrder,
} from "./types";

const copyButtonTitle = "Copy to clipboard";
const copyButtonTooltip = "Copied!";

export interface Props {
  lang?: string;
  title?: string;
  removedLineIndex?: string;
  removedLineCount?: string;
  lineMarkings?: string;
  inlineMarkings?: string;
}

const {
  lang = "",
  removedLineIndex = "",
  removedLineCount = "",
  title = "",
  lineMarkings = "",
  inlineMarkings = "",
} = Astro.props as Props;

const isTerminal = ["shellscript", "shell", "bash", "sh", "zsh"].includes(lang);
const intRemovedLineIndex = parseInt(removedLineIndex) || 0;
const intRemovedLineCount = parseInt(removedLineCount) || 0;

// Generate HTML code from the title (if any), improving the ability to wrap long file paths
// into multiple lines by inserting a line break opportunity after each slash
const titleHtml = decodeURIComponent(title).replace(/([\\/])/g, "$1<wbr/>");

// Render the default slot, which contains the syntax-highlighted code in HTML format
// as processed by Astro's Shiki integration
let codeSnippetHtml = await Astro.slots.render("default");

// Mark lines and expressions (if requested)
codeSnippetHtml = applyMarkings(codeSnippetHtml, lineMarkings, inlineMarkings);

function applyMarkings(
  highlightedCodeHtml: string,
  strLineMarkings: string,
  strInlineMarkings: string,
) {
  const lineMarkings: LineMarkingDefinition[] = parseMarkingDefinition(
    strLineMarkings,
    // Syntax: [mark=|del=|ins=]{2-5,7}
    /^(?:(.*)=){(.+)}$/,
    `Invalid code snippet line marking: Expected a range like "{2-5,7}",
		optionally with one of the prefixes "mark=", "del=" or "ins=", but got "$entry"`,
  ).map(({ markerType, groupValues: [content] }) => {
    const lines = content ? rangeParser(content) : [];

    // If any lines were removed during preprocessing,
    // automatically shift marked line numbers accordingly
    const shiftedLines = lines.map((lineNum) => {
      if (lineNum <= intRemovedLineIndex) return lineNum;
      if (lineNum > intRemovedLineIndex + intRemovedLineCount)
        return lineNum - intRemovedLineCount;
      return -1;
    });

    return {
      markerType,
      lines: shiftedLines,
    };
  });

  const inlineMarkings: InlineMarkingDefinition[] = parseMarkingDefinition(
    strInlineMarkings,
    // Syntax for plaintext strings:
    // - Double quotes:   [mark=|del=|ins=]"<Button />"
    // - Single quotes:   [mark=|del=|ins=]'<p class="hi">'
    //
    // Syntax for regular expressions:
    // - Forward slashes: [mark=|del=|ins=]/hi [a-z]+/
    /^(?:(.*)=)([/"'])(.+)\2$/,
    `Invalid code snippet inline marking: Expected either a string in single or double quotes,
		or a RegExp in forward slashes like "/hi [a-z]+/", optionally with one of the prefixes
		"mark=", "del=" or "ins=", but got "$entry"`,
  ).map(({ markerType, groupValues: [delimiter, content] }) => {
    let text: string | undefined;
    let regExp: RegExp | undefined;

    if (delimiter === "/") {
      try {
        // Try to use regular expressions with capture group indices
        regExp = new RegExp(content ?? "", "gd");
      } catch (error) {
        // Use fallback if unsupported
        regExp = new RegExp(content ?? "", "g");
      }
    } else {
      text = content;
    }

    return {
      markerType,
      text: text ?? "",
      regExp,
    };
  });

  const shikiBlock = new ShikiBlock(highlightedCodeHtml, {
    copyButtonTitle,
    copyButtonTooltip,
  });
  shikiBlock.applyMarkings(lineMarkings, inlineMarkings);
  return shikiBlock.renderToHtml();
}

function parseMarkingDefinition(
  serializedArr: string,
  parts: RegExp,
  parseErrorMsg: string,
) {
  return serializedArr
    .split(",")
    .map((entry) => decodeURIComponent(entry))
    .map((entry) => {
      const matches = entry.match(parts);
      let rawMarkerType = matches?.[1];
      // Fix common marker type mistakes
      if (rawMarkerType === "add") rawMarkerType = "ins";
      if (rawMarkerType === "rem") rawMarkerType = "del";
      const markerType = (rawMarkerType as MarkerType) || "mark";
      const isValid = matches && MarkerTypeOrder.includes(markerType);
      if (entry && !isValid) {
        const formattedParseErrorMsg = parseErrorMsg
          .replace("$entry", entry)
          .replace(/\r?\n\s+/g, " ");
        console.error(`*** ${formattedParseErrorMsg}\n`);
      }
      return {
        entry,
        markerType: markerType,
        groupValues: isValid ? matches.slice(2) : [],
      };
    })
    .filter((entry) => entry.groupValues.length);
}
---

<figure
  class:list={[
    "code-snippet",
    "relative",
    isTerminal && "is-terminal",
    titleHtml && "has-title",
    `lang-${lang}`,
  ]}
>
  {
    titleHtml || isTerminal ? (
      <figcaption class="header font-bold p-4 border-b-primary text-primary border-b bg-[#24292e] rounded-tl-md rounded-tr-md -mb-4 relative z-10 w-fit">
        {titleHtml ? (
          <span class="title" set:html={titleHtml} />
        ) : (
          isTerminal && <span class="sr-only">Terminal window</span>
        )}
      </figcaption>
    ) : null
  }
  <Fragment set:html={codeSnippetHtml} />
</figure>
<script>
  // Find all buttons with the \`copy-button\` class on page.
  const buttons =
    document.querySelectorAll<HTMLButtonElement>("button.copy-button");

  /** Store timeout to clear when button is repeatedly clicked. */
  let copyTimeout: any;

  // Handle clicks on each button.
  buttons.forEach((button) => {
    button.addEventListener("click", async () => {
      const codeText = decodeURIComponent(button.value);
      try {
        clearTimeout(copyTimeout);
        await navigator.clipboard.writeText(codeText);
        button.nextElementSibling?.classList.remove("hidden");
        copyTimeout = setTimeout(() => {
          button.nextElementSibling?.classList.add("hidden");
        }, 3000);
      } catch (err) {
        clearTimeout(copyTimeout);
        button.classList.add("copy-button-error");
        copyTimeout = setTimeout(() => {
          button.classList.remove("copy-button-error");
        }, 3000);
      }
    });
  });
</script>
